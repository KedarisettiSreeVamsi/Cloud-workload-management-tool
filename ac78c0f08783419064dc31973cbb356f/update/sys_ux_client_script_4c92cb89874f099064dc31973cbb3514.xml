<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes/>
        <macroponent display_value="Data Navigator">2f828b89874f099064dc31973cbb35ad</macroponent>
        <name>Open side pane</name>
        <required_translations/>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {
    const {
        name,
        payload = {}
    } = event;
    let newRelatedListTable;
    let newFilter;
    let newTitle;
    let listId = null;
    let groupByColumns = [];

    switch (name) {
        case 'SN_GRC_360_DEGREE_VISUALIZATION#NODE_ELEMENT_ACTION_DISPATCHED':
            {
                const {
                    action,
                    meta = {}
                } = payload;
                const {
                    type
                } = action;

                if(api.state.screenSize == 'medium')
                    api.setState('dividerPosition', 70);
                else
                    api.setState('dividerPosition', 65);
                    
                if (type !== 'SN_GRC_360_DEGREE_VISUALIZATION_RADIAL_LAYOUT#NODE_PILL_CLICKED') {
                    return;
                }

                const {
                    appended
                } = meta;
                const {
                    relatedListTable,
                    filter,
                    title,
                    relatedListName,
                    groupby
                } = appended;
                newRelatedListTable = relatedListTable;
                newFilter = filter;
                newTitle = title;
                groupByColumns = groupby;
                listId = relatedListName ? relatedListName : null;

                break;
            }
        case 'SN_GRC_360_DEGREE_VISUALIZATION#LAYOUT_ACTION_DISPATCHED':
            {
                const {
                    action
                } = payload;
                const {
                    type
                } = action;
                if (type !== 'SN_GRC_360_DEGREE_VISUALIZATION#MODAL_LIST_ITEM_CLICKED') {
                    return;
                }

                const {
                    payload: actionPayload
                } = action;
                const {
                    item = {}
                } = actionPayload;
                const {
                    __append_to_meta__ = {}
                } = item;
                const {
                    relatedListTable,
                    filter,
                    title,
                    relatedListName,
                    groupby
                } = __append_to_meta__;
                newRelatedListTable = relatedListTable;
                newFilter = filter;
                newTitle = title;
                groupByColumns = groupby;
                listId = relatedListName ? relatedListName : null;

                break;
            }
        default:
            {
                return;
            }
    }

    let visualizationDS = JSON.parse(JSON.stringify(api.state.visualizationDS));
    visualizationDS[0].tableOrViewName = newRelatedListTable;
    visualizationDS[0].filterQuery = newFilter;

    api.setState('displayedPane', 'both');
    api.setState('visualizationFilter', '');
    api.setState('relatedListName', listId);
    api.setState('relatedListFilter', newFilter || '');
    api.setState('relatedListTable', newRelatedListTable || '');
    api.setState('relatedListTitle', newTitle || '');
    api.setState('visualizationDS', visualizationDS);

    if (groupByColumns == null || groupByColumns == undefined || groupByColumns.length == 0)
        api.setState('hideVisualization', true);
    else {
        let visualizationGroupby = JSON.parse(JSON.stringify(api.state.visualizationGroupby));
        visualizationGroupby[0].groupBy[0].groupByField = groupByColumns[0].id;
        api.setState('visualizationDropdownItems', groupByColumns);
        api.setState('selectedGroupbyInDropdown', [groupByColumns[0].id]);
        api.setState('visualizationGroupby', visualizationGroupby);
        api.setState('hideVisualization', false);
        if (groupByColumns.length == 1)
            api.setState('hideVisualizationDropdown', true);
        else
            api.setState('hideVisualizationDropdown', false);
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>sjansse2</sys_created_by>
        <sys_created_on>2022-04-22 15:35:25</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>4c92cb89874f099064dc31973cbb3514</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Open side pane</sys_name>
        <sys_package display_value="Cloud Workload Management Tool" source="x_asmln_cloud_wo_1">ac78c0f08783419064dc31973cbb356f</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Cloud Workload Management Tool">ac78c0f08783419064dc31973cbb356f</sys_scope>
        <sys_update_name>sys_ux_client_script_4c92cb89874f099064dc31973cbb3514</sys_update_name>
        <sys_updated_by>sjansse2</sys_updated_by>
        <sys_updated_on>2022-04-22 15:35:25</sys_updated_on>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
